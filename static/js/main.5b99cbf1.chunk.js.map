{"version":3,"sources":["request.js","axiose.js","Components/Banner.js","Components/Nav.js","Components/Row.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","request","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","require","default","create","baseURL","Banner","str","n","useState","movie","setMovie","useEffect","a","axiose","get","requests","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","Axios","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","poster_path","id","videoId","opts","height","width","playerVars","autoplay","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5b99cbf1.chunk.js","sourcesContent":["const API_KEY = '14f6bd1779b20d49898dfad0e257ea31';\n\n\nconst request = {  \n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`\n}\nexport default request;","const { default: Axios } = require(\"axios\")\n\nconst instance = Axios.create({\n    baseURL:\"https://api.themoviedb.org/3\"\n})\n\n\nexport default  instance","import React, { useEffect, useState } from \"react\";\nimport requests from \"../request\";\nimport axiose from \"../axiose\";\nimport \"../style/Banner.css\";\n\nconst Banner = () => {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axiose.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n  //   console.log(movie);\n  function truncate(str,n){\n      return str?.length>n?str.substr(0,n-1)+\"...\":str;\n  }\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition:'center center'\n      }}\n    >\n      <div className=\"banner_contetents\">\n        {/* title */}\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        {/* button */}\n        <button className=\"banner_button\">PLAY</button>\n        <button className=\"banner_button\">MY LIST</button>\n        {/* description */}\n        <h1 className=\"banner_desscription\">{truncate(movie?.overview,150)}</h1>\n      </div>\n      <div className='banner_fadeBottom'></div>\n    </header>\n  );\n};\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"../style/Nav.css\";\n\nconst Nav = () => {\n  const [show, handleShow] = useState();\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav_avtar\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Netflix_meaningful_logo.svg/1024px-Netflix_meaningful_logo.svg.png\"\n        alt=\"netflix logo Avtar\"\n      />\n    </div>\n  );\n};\n\nexport default Nav;\n","import Axios from \"../axiose\";\nimport \"../style/Row.css\";\nimport React, { useEffect, useState } from \"react\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  //Asnippet of code which runs based on a specific conditions\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await Axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  // console.log(movies);\n  const baseurl = \"https://image.tmdb.org/t/p/original/\";\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${baseurl}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n};\n\nexport default Row;\n","\nimport React from \"react\";\nimport \"./App.css\";\nimport Banner from \"./Components/Banner\";\nimport Nav from \"./Components/Nav\";\nimport Row from \"./Components/Row\";\nimport request from \"./request\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* navbar */}\n      <Nav />\n      {/* Banner */}\n      <Banner />\n\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={request.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"TRENDING NOW\" fetchUrl={request.fetchTrending} />\n      <Row title=\"TOP RATED\" fetchUrl={request.fetchTopRated} />\n      <Row title=\"ACTION MOVIES\" fetchUrl={request.fetchActionMovies} />\n      <Row title=\"COMEDY MOVIES\" fetchUrl={request.fetchComedyMovies} />\n      <Row title=\"HORROR MOVIES\" fetchUrl={request.fetchHorrorMovies} />\n      <Row title=\"ROMANCE MOVIES\" fetchUrl={request.fetchRomanceMovies} />\n      <Row title=\"DOCUMENTARIES \" fetchUrl={request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}